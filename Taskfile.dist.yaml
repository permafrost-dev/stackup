# This file can be run with the `task` utility: https://taskfile.dev/
version: '3'

dotenv: ['.env', '.env.local']

vars:
  APP_VERSION_FILE: './lib/version/app-version.go'
  BUILD_OUTPUT_DIR: './dist'
  DIST_TARGET_FILE: '{{.BUILD_OUTPUT_DIR}}/stackup'
  ENTRY_FILENAME: './app/main.go'

tasks:

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  test:
    desc: Runs tests
    cmds:
      - go test -cover ./lib/**

  build:
    desc: Builds application
    preconditions:
      - task: prepare-dist-folder
      - task: mod
    deps:
      - task: update-version-file
    cmds:
      - task: build-stackup
      - task: copy-config-files-to-dist

  clean:
    desc: Cleans up build artifacts
    preconditions:
      - test -d {{.BUILD_OUTPUT_DIR}}
      - test -f {{.DIST_TARGET_FILE}}
    cmds:
      - rm -f {{.DIST_TARGET_FILE}}

  lint:
    dir: .
    preconditions:
      - which golangci-lint
      - test -f .golangci.yaml
      - which dotenv-linter
      - which typos
      - which actionlint
      - which shellcheck
    cmds:
      - golangci-lint run
      - dotenv-linter --quiet --not-check-updates --recursive --exclude dist/.env
      - actionlint
      - shellcheck ./.custom-hooks/*
      - typos

  update-version-file:
    cmds:
      - go run tools/generate-version-file.go

  prepare-dist-folder:
    desc: Prepares dist folder
    silent: true
    cmds:
      - mkdir -p {{.BUILD_OUTPUT_DIR}}

  build-stackup:
    desc: Builds stackup binary
    vars:
      GIT_COMMIT:
        sh: git log -n 1 --format=%h
    deps:
      - task: prepare-dist-folder
    sources:
      - '{{.ENTRY_FILENAME}}'
      - ./lib/**/*.go
      - ./lib/*.go
    generates:
      - '{{.DIST_TARGET_FILE}}'
    cmds:
      - go build -trimpath -ldflags="-s -w -X main.Version={{.VERSION}}-{{.GIT_COMMIT}}" -o {{.DIST_TARGET_FILE}} {{.ENTRY_FILENAME}}

  copy-config-files-to-dist:
    desc: Copies config template to dist folder
    deps:
      - task: prepare-dist-folder
    cmds:
      - cp -f ./templates/*.yaml {{.BUILD_OUTPUT_DIR}}
      - cp -f ./.env {{.BUILD_OUTPUT_DIR}}

  update-checksums:
    dir: templates/remote-includes
    cmds:
      - sha256sum *.yaml > checksums.sha256.txt
      - git add checksums.sha256.txt
      - git commit -m "update checksum files"

  autobuild:
    interactive: true
    desc: Watches for changes and automatically rebuilds the project binary, displays a minimal system notification on start/finish
    preconditions:
      - which watchexec
    cmds:
      - watchexec --exts go --fs-events create,modify,remove -N --debounce 300 -w ./lib -- task build -f
