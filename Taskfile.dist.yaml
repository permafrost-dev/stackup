# This file can be run with the `task` utility: https://taskfile.dev/
version: '3'

dotenv: ['.env', '.env.local']

vars:
  APP_VERSION_FILE: './app/version.go'
  ENTRY_FILENAME: './app/main.go'
  BUILD_OUTPUT_DIR: './dist'
  BINARY_FILENAME: 'stackup'
  DIST_TARGET_FILE: '{{.BUILD_OUTPUT_DIR}}/{{.BINARY_FILENAME}}'
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  SRC_DIRS:
    sh: find . -name "*.go" -printf '%h\n' | sort -u | egrep -v '^.$' | grep -v './tools' | sed ':a;N;$!ba;s/\n/ /g' | awk -F'|' '{ print $1 }'
  DOTENV_FILES:
    sh: find . -name ".env*" -print | sort -u | grep -v './dist' | sed ':a;N;$!ba;s/\n/ /g' | awk -F'|' '{ print $1 }'

tasks:

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  build:
    desc: Builds application
    preconditions:
      - task: prepare-dist-folder
      - task: mod
    cmds:
      - task: build-stackup
      - task: copy-config-template-to-dist

  clean:
    desc: Cleans up build artifacts
    preconditions:
      - test -d {{.BUILD_OUTPUT_DIR}}
      - test -f {{.DIST_TARGET_FILE}}
    cmds:
      - rm -f {{.DIST_TARGET_FILE}}

  lint:
    cmds:
      - task: lint-dotenv
      - task: lint-stackup

  update-version-file:
    cmds:
      #- printf "package main\n\nconst APP_VERSION = \"{{.VERSION}}\"" > {{.APP_VERSION_FILE}}
      - go run tools/generate-version-file.go
    status:
      - test -f {{.APP_VERSION_FILE}}

  lint-dotenv:
    desc: Lints all dotenv files
    preconditions:
      - which dotenv-linter
    cmds:
      - dotenv-linter {{.DOTENV_FILES}}

  lint-stackup:
    desc: Runs golangci-lint
    preconditions:
      - which golangci-lint
    cmds:
      - golangci-lint run {{.SRC_DIRS}}

  prepare-dist-folder:
    desc: Prepares dist folder
    silent: true
    cmds:
      - mkdir -p {{.BUILD_OUTPUT_DIR}}
    status:
      - test -d {{.BUILD_OUTPUT_DIR}}

  build-stackup:
    desc: Builds stackup binary
    deps:
      - task: prepare-dist-folder
      - task: update-version-file
    sources:
      - '{{.ENTRY_FILENAME}}'
    generates:
      - '{{.DIST_TARGET_FILE}}'
    cmds:
      - go build -trimpath -ldflags="-s -w -X main.Version={{.VERSION}}-{{.GIT_COMMIT}}" -o {{.DIST_TARGET_FILE}} {{.ENTRY_FILENAME}}

  copy-config-template-to-dist:
    desc: Copies config template to dist folder
    deps:
      - task: prepare-dist-folder
    cmds:
      - cp -f ./templates/*.yaml {{.BUILD_OUTPUT_DIR}}
