name: my stack
description: laravel application stack
version: 1.0.0

preconditions:
    - name: dependencies are installed
      check: binaryExists("php") && binaryExists("node")

    - name: frontend project exists
      check: exists(env("FRONTEND_PROJECT_PATH"))

    - name: backend project has docker-compose file
      check: exists(env("LOCAL_BACKEND_PROJECT_PATH") + "/docker-compose.yml")

    - name: backend project is a laravel project
      check: |
        exists(env("LOCAL_BACKEND_PROJECT_PATH") + "/artisan") &&
        exists(env("LOCAL_BACKEND_PROJECT_PATH") + "/composer.json")

startup:
  - task: start-containers
  - task: run-migrations

shutdown:
  - task: stop-containers

servers:
  - task: frontend-httpd
  - task: backend-httpd
  - task: horizon-queue

scheduler:
    - task: artisan-scheduler
      cron: '* * * * *'

tasks:
  - name: spin up containers
    id: start-containers
    command: podman-compose up -d
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'
    silent: true

  - name: run migrations (rebuild db)
    id: run-migrations-fresh
    if: hasFlag("seed")
    command: php artisan migrate:fresh --seed
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'

  - name: run migrations (no seeding)
    id: run-migrations-no-seed
    if: '!hasFlag("seed")'
    command: php artisan migrate
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'

  - name: run migrations
    id: run-migrations
    command: '{{ selectTaskWhen(hasFlag("seed"), "run-migrations-fresh", "run-migrations-no-seed").Command }}'
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'

  - name: stop containers
    id: stop-containers
    command: podman-compose down
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'
    silent: true

  - name: run artisan scheduler
    id: artisan-scheduler
    command: php artisan schedule:run
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'

  - name: frontend httpd (linux, macos)
    id: frontend-httpd-linux
    command: node ./node_modules/.bin/next dev
    path: '{{ env("FRONTEND_PROJECT_PATH") }}'
    platforms: ['linux', 'darwin']

  - name: frontend httpd (windows)
    id: frontend-httpd-windows
    command: npm run dev
    path: '{{ env("FRONTEND_PROJECT_PATH") }}'
    platforms: ['windows']

  - name: '{{ selectTaskWhen(platform() == "windows", "frontend-httpd-windows", "frontend-httpd-linux").Name }}'
    id: frontend-httpd
    command: '{{ selectTaskWhen(platform() == "windows", "frontend-httpd-windows", "frontend-httpd-linux").Command }}'
    path: '{{ selectTaskWhen(platform() == "windows", "frontend-httpd-windows", "frontend-httpd-linux").Path }}'

  - name: horizon queue
    id: horizon-queue
    command: php artisan horizon
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'
    platforms: ['linux', 'darwin']

  - name: backend httpd
    id: backend-httpd
    command: php artisan serve
    path: '{{ env("LOCAL_BACKEND_PROJECT_PATH") }}'
