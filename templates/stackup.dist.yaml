name: my stack
description: laravel application stack
version: 1.0.0

init: |
  vars.Set("php-version", semver(outputOf("php --version")));
  vars.Set("node-version", semver(outputOf("node --version")));

  if (binaryExists("podman-compose")) {
    setVar("containerEngineBinary", "podman-compose");
  } else {
    setVar("containerEngineBinary", "docker-compose");
  }

  app.SuccessMessage("selected " + getVar("containerEngineBinary") + " as the container engine");

preconditions:
    - name: dependencies are installed
      check: binaryExists("php") && binaryExists("node")

    - name: PHP is at least version 8
      check: vars.Get("php-version").GreaterThan("8.0")

    - name: node is at least version 14
      check: vars.Get("node-version").GreaterThan("14.0")

    - name: environment variables exist and are not empty
      check: |
        hasEnv("FRONTEND_PROJECT_PATH") && hasEnv("LOCAL_BACKEND_PROJECT_PATH") &&
        env("FRONTEND_PROJECT_PATH") != "" && env("LOCAL_BACKEND_PROJECT_PATH") != ""

    - name: frontend project exists
      check: fs.Exists($FRONTEND_PROJECT_PATH)

    - name: backend project has a docker-compose file
      check: fs.Exists($LOCAL_BACKEND_PROJECT_PATH + "/docker-compose.yml")

    - name: backend project is a laravel project
      check: |
        fs.Exists($LOCAL_BACKEND_PROJECT_PATH + "/artisan") &&
        fs.Exists($LOCAL_BACKEND_PROJECT_PATH + "/composer.json")

startup:
  - task: start-containers
  - task: run-migrations

shutdown:
  - task: stop-containers

servers:
  - task: frontend-httpd
  - task: backend-httpd
  - task: horizon-queue

scheduler:
    - task: artisan-scheduler
      cron: '* * * * *'

tasks:
  - id: start-containers
    command: '{{ getVar("containerEngineBinary") + " up -d" }}'
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'
    silent: true

  - name: run migrations (rebuild db)
    id: run-migrations-fresh
    if: hasFlag("seed")
    command: php artisan migrate:fresh --seed
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'

  - name: run migrations (no seeding)
    id: run-migrations-no-seed
    if: '!hasFlag("seed")'
    command: php artisan migrate
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'

  - id: run-migrations
    command: '{{ selectTaskWhen(hasFlag("seed"), "run-migrations-fresh", "run-migrations-no-seed").Command }}'
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'

  - id: stop-containers
    command: '{{ getVar("containerEngineBinary") + " down" }}'
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'
    silent: true

  - id: run-artisan-scheduler
    command: php artisan schedule:run
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'

  - name: frontend httpd (linux, macos)
    id: frontend-httpd-linux
    command: node ./node_modules/.bin/next dev
    path: '{{ $FRONTEND_PROJECT_PATH }}'
    platforms: ['linux', 'darwin']

  - name: frontend httpd (windows)
    id: frontend-httpd-windows
    command: npm run dev
    path: '{{ $FRONTEND_PROJECT_PATH }}'
    platforms: ['windows']

  - name: '{{ selectTaskWhen(platform() == "windows", "frontend-httpd-windows", "frontend-httpd-linux").Name }}'
    id: frontend-httpd
    command: '{{ selectTaskWhen(platform() == "windows", "frontend-httpd-windows", "frontend-httpd-linux").Command }}'
    path: '{{ selectTaskWhen(platform() == "windows", "frontend-httpd-windows", "frontend-httpd-linux").Path }}'

  - name: horizon queue
    id: horizon-queue
    if: composerJson($LOCAL_BACKEND_PROJECT_PATH).HasDependency("laravel/horizon");
    command: php artisan horizon
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'
    platforms: ['linux', 'darwin']

  - name: backend httpd
    id: backend-httpd
    command: php artisan serve
    path: '{{ $LOCAL_BACKEND_PROJECT_PATH }}'
